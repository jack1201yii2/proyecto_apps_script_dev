1. Crear el sig archivo views/index.html

2. crear el siguiente archivo views/helpers/cdn y pegar los sig CDN's

	<!-- cdn react js -->
	<script crossorigin src="https://unpkg.com/react@17/umd/react.production.min.js"></script>

	<!-- cdn react dom -->
	<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>

	<!-- cdn react router dom -->
	<script https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/5.0.0/react-router-dom.js></script>

	<!-- cdn babel -->
	<script src="https://unpkg.com/babel-standalone@6.26.0/babel.js"></script>

3. inicializamos la aplicacion e incluimos los archivos en codigo.gs

4. en index incluimos los CDN's

5. creamos un archivo views/helpers/constantes e incluimos las constantes.

6. Importar views/helpers/constantes en el archivo index despues del body

7. crear el componente views/App


Cap 3

Crear una carpeta en la PC

habilitar el acceso a la api clasp:
https://script.google.com/home/usersettings

Instalaci칩n de node js: 
https://nodejs.org/es/download/

Instalamos clasp para podernos loguear y sincronizar nuestro proyecto
>npm i @google/clasp -g

Abrir la carpeta con VSCode e inicializar el proyecto con 
> npm init -y


Logearse para sincronizar el proyecto 
> clasp login

Ahora vamos a clonar el proyecto con el Id (esta en la url del proyecto)
>clasp clone '1kqIuM6xzxa7CGnyQ6aS2ajayqTc0dRlAkhTrsee4n8qIiP7cxU8_Q0a7'

Ejecutar el comando para el auto completado
> npm i -s @types/google-apps-script

configuramos un frame para que podamos trabajar de en un frame desde VSCode en el archivo codigo despues de evualate().
.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL)

Despues de ingresamos el siguiente comando para poder subir los cambios y le colocamos "-w" para que siga escuachando los cambios
>clasp push -w

Luego ingresamos la siguiente linea de codigo colocando un punto despues del anterior 
en el archivo Codigo para agregar un icono en la pesta침a del navegador
.setFaviconUrl('https://cdn-icons-png.flaticon.com/512/3059/3059997.png')

Para bajar cambios es con el comando 
>clasp pull.

Para subir cambios es con 
>clasp push.

Cap 5. Iniciar nuevo proyecto

1- Crear el proyecto en Drive
2- Crear la carpeta local
3- Abrir la terminal y logearse con: clasp loggin
4- Inicializat el proyecto en local con : npm init -y
5- Instalar el autocompletado de GAS con: npm i -s @types/google-apps-script
6- Clonar el proyecto de drive a local con: clasp clone "pegar el id aqui"
7- Instalar Tailwind CSS con: npm install -D tailwindcss
8- Inicializar Tailwind CSS con: npx tailwindcss init 칩 npx tailwindcss-cli@latest init para V4
9- Crear el archivo .claspignore y colocar los archivos que no queramos subir.
	tailwind.config.js
	node_modules/**
10- subir los cambios a Drive con: clasp push -w

Subir a github
1- crear el repositorio en gihub
2- inicializar el proyecto local con: git init y crear el archivo .gitignore y pegar lo siguiente
	node_modules/
	.clasp.json
	appsscript.json
	env.js
3- A침adir todos los archivos con: git add .
4- Hacer el primer commit: git commit -m "Primer commit"
5- Cambiar el nombre de la rama: git branch -M main
6- Vincular local con github: git remote add origin https://github.com/jack1201yii2/proyecto_apps_script_dev.git
7- Subir los el proyecto local: git push -u origin main

Cap 6. Configuraciones previas 
1-Creamos 2 carpetas frontend y backend
2- en backend movemos el archivo en Codigo.js
 y le cambiamos el nombre a server y colocamos el codigo correspondiente
3- Creamos el archiv frontend/index.html y la carpeta frontend/views
4- En index.html colocamos el div con id root para que react pueda renderizar todo ahi
5- Creamos un archivo componente frontend/App.html
6- Colocamos el codigo para poder renderisar el componente
7- Importamos el componente frontend/App.html con la funcion include
 en el archivo frontend/index.html despues del body <?!= include('frontend/App') ?>
8- Creamos el archivo frontend/config/cdn.htlmx y pegamos todos los cdn's que utilizaremos
9- incluimos el cdn al archivo index con include en la etiqueta <head>
10- Creamos el archivo frontend/config/constantesCdn.html y pegamos todas las cosntantes que usaremos
11- Incluimos las constantesCdn al archivo index con include despues de <body>
12- Creamos el archivo frontend/routes/Routes.html
13- Incluimos el archivo Routes.html en index.html con include despues del <body> antes de App
14- subimos los cambio a drive y a git

Cap. 7 Rutas y componentes
1- Creamos el archivo views/inicio.html y lo incluimos en index
2- Agregamos la ruta de Inicio en el archivo Routes.html
3- creamos el archivo frontend/componentes/header.html
	y lo agregamos en el archivo Routes.html antesde de <Switch>
	y lo incluimos en index.html
4- Creamos el archivo frontend/views/formularios/FormularioRegistro
	y lo agregamos en el archivo Routes.html en el <Switch>
	y lo incluimos en index.html
	y angregamos el link en Header.html
5- colocamos una sombra en el div del header.html para diferenciar
6- En el archivo Routes.html redireccionamos a inicio colocando la 
	etiqueta <Redirect to="/" /> antes de switch
7- En el archivo header le metemos unos estilos para que se vea mejor
